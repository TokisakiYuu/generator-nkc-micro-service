{"version":3,"sources":["../src/index.ts"],"names":["AppGenerator","Generator","constructor","args","opts","sourceRoot","path","resolve","__dirname","copyStaticFiles","file","staticFiles","fs","copy","templatePath","destinationPath","pkgJson","answer","prompt","type","name","message","validate","value","test","projectName","copyTpl","serviceConfig","serviceName","useProcessIDAsServiceID","customServiceID","serviceNameAns","serviceIdTypeAns","choices","default","loop","serviceIdType","serviceIDAns","serviceID","npmIns","installDependencies","yarn","bower","npm","complete","log"],"mappings":"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","sourcesContent":["import path from \"path\";\r\nimport Generator from \"yeoman-generator\";\r\nimport staticFiles from \"./staticFiles\";\r\n\r\nexport default class AppGenerator extends Generator {\r\n  constructor(args: string | string[], opts: Generator.GeneratorOptions) {\r\n    super(args, opts);\r\n    this.sourceRoot(path.resolve(__dirname, \"../templates\"));\r\n  }\r\n\r\n  copyStaticFiles(): void {\r\n    for(const file of staticFiles) {\r\n      this.fs.copy(\r\n        this.templatePath(file),\r\n        this.destinationPath(file),\r\n      );\r\n    }\r\n  }\r\n\r\n  async pkgJson(): Promise<void> {\r\n    const answer = await this.prompt([\r\n      {\r\n        type: \"input\",\r\n        name: \"projectName\",\r\n        message: \"请输入项目名\",\r\n        validate: function (value: string) {\r\n          if((/^[a-zA-Z0-9\\/\\-@]+$/g).test(value)) {\r\n            return true;\r\n          }\r\n          return \"项目名只能包含以下字符: \\\"@\\\"  \\\"/\\\"  \\\"-\\\" \\\"a-zA-Z\\\" \\\"0-9\\\"\";\r\n        },\r\n      }\r\n    ]);\r\n    const projectName = answer.projectName;\r\n    this.fs.copyTpl(\r\n      this.templatePath(\"package.json\"),\r\n      this.destinationPath(\"package.json\"),\r\n      { projectName: projectName }\r\n    );\r\n    this.fs.copyTpl(\r\n      this.templatePath(\"package-lock.json\"),\r\n      this.destinationPath(\"package-lock.json\"),\r\n      { projectName: projectName }\r\n    );\r\n  }\r\n\r\n  async serviceConfig(): Promise<void> {\r\n    let serviceName = \"\",\r\n        useProcessIDAsServiceID = true,\r\n        customServiceID = \"\";\r\n\r\n    // 询问服务名\r\n    const serviceNameAns = await this.prompt({\r\n      type: \"input\",\r\n      name: \"serviceName\",\r\n      message: \"请输入服务名\",\r\n      validate: function (value: string) {\r\n        if((/^[a-zA-Z\\-_]+$/g).test(value)) {\r\n          return true;\r\n        }\r\n        return \"服务名只能包含以下字符: \\\"-\\\" \\\"_\\\" \\\"a-zA-Z\\\"\";\r\n      },\r\n    });\r\n    serviceName = serviceNameAns.serviceName;\r\n    // 询问服务id的类型\r\n    const serviceIdTypeAns = await this.prompt({\r\n      type: \"list\",\r\n      name: \"serviceIdType\",\r\n      message: \"服务ID的类型\",\r\n      choices: [\r\n        {\r\n          name: \"使用进程ID作为服务ID(单主机多实例)\",\r\n          value: \"pid\"\r\n        },\r\n        {\r\n          name: \"使用固定值作为服务ID(跨主机、分布式)\",\r\n          value: \"custom\"\r\n        }\r\n      ],\r\n      default: \"pid\",\r\n      loop: true\r\n    });\r\n    if(serviceIdTypeAns.serviceIdType === \"custom\") {\r\n      const serviceIDAns = await this.prompt({\r\n        type: \"input\",\r\n        name: \"serviceID\",\r\n        message: \"请输入服务ID\"\r\n      });\r\n      customServiceID = serviceIDAns.serviceID;\r\n      useProcessIDAsServiceID = false;\r\n    } else if(serviceIdTypeAns.serviceIdType === \"pid\") {\r\n      useProcessIDAsServiceID = true;\r\n    }\r\n    this.fs.copyTpl(\r\n      this.templatePath(\".env\"),\r\n      this.destinationPath(\".env\"),\r\n      { serviceName, useProcessIDAsServiceID, customServiceID }\r\n    );\r\n  }\r\n\r\n  npmIns(): void {\r\n    this.installDependencies({\r\n      yarn: false,\r\n      bower: false,\r\n      npm: true\r\n    });\r\n  }\r\n\r\n  complete(): void {\r\n    this.log(\"项目创建完毕 ✔️\");\r\n  }\r\n}\r\n"],"file":"index.js"}